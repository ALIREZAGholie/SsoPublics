// <auto-generated />
using System;
using Infrastructure.Context.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Context.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20250718174102_AddAllAuth")]
    partial class AddAllAuth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("ApiMethodType_GKey");

            modelBuilder.HasSequence<int>("ConfigOrganizationType_GKey");

            modelBuilder.HasSequence<int>("LocationType_GKey");

            modelBuilder.HasSequence<int>("Position_GKey");

            modelBuilder.HasSequence<int>("Rank_GKey");

            modelBuilder.HasSequence<int>("Role_GKey");

            modelBuilder.HasSequence<int>("Section_GKey");

            modelBuilder.Entity("Domain.ApiEndpointAgg.ApiEndpointEntity.ApiEndpoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApiEndpointTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApiEndpointTypeId");

                    b.ToTable("ApiEndpoint");
                });

            modelBuilder.Entity("Domain.ApiEndpointAgg.ApiEndpointEntity.ApiMethodType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR ApiMethodType_GKey");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApiMethodTypes");
                });

            modelBuilder.Entity("Domain.ApiEndpointAgg.ApiEndpointEntity.RoleApiPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApiEndpointId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ApiEndpointId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleApiPermission");
                });

            modelBuilder.Entity("Domain.ClientAgg.ClientEntity.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllowOfflineAccess")
                        .HasColumnType("bit");

                    b.Property<string>("AllowedGrantTypes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AllowedScopes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientSecretHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Domain.CompanyAgg.CompanyEntity.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Parents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ParentId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Domain.FormAgg.FormEntity.Form", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FormId")
                        .HasColumnType("bigint");

                    b.Property<string>("FormNamePersian")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FormTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FormUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Parent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("FormTypeId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("Domain.FormAgg.FormTypeEntity.FormType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("FormType");
                });

            modelBuilder.Entity("Domain.HardCodeAgg.HardCodeEntity.HardCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HardCode");
                });

            modelBuilder.Entity("Domain.LocationAgg.LocationEntity.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<long?>("LocationTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationTypeId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Domain.LocationAgg.LocationTypeEntity.LocationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("NEXT VALUE FOR LocationType_GKey");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("LocationType");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.ConfigOrganizationEntity.ConfigOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConfigOrganizationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long?>("SectionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ConfigOrganizationTypeId");

                    b.HasIndex("ParentId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SectionId");

                    b.ToTable("ConfigOrganization");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.ConfigOrganizationEntity.ConfigOrganizationRank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ConfigOrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConfigOrganizationId");

                    b.HasIndex("RankId");

                    b.ToTable("ConfigOrganizationRank");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.ConfigOrganizationEntity.ConfigOrganizationType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR ConfigOrganizationType_GKey");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ConfigOrganizationType");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.PositionEntity.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR Position_GKey");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.RankEntity.Rank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR Rank_GKey");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Rank");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.SectionEntity.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR Section_GKey");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Domain.RoleAgg.RoleEntity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AccessAll")
                        .HasColumnType("bit");

                    b.Property<bool>("AccessAllEmploye")
                        .HasColumnType("bit");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValueSql("NEXT VALUE FOR Role_GKey");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("RoleExpireDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ParentId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Domain.RoleAgg.RoleFormEntity.RoleForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FormId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleForm");
                });

            modelBuilder.Entity("Domain.UserAgg.UserEntity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<long?>("LockoutEnd")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.UserAgg.UserRoleEntity.UserRole", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Webgostar.Framework.Base.BaseModels.SystemError", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ErrorFile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InnerExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasColumnOrder(1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PublicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SystemError");
                });

            modelBuilder.Entity("Domain.ApiEndpointAgg.ApiEndpointEntity.ApiEndpoint", b =>
                {
                    b.HasOne("Domain.ApiEndpointAgg.ApiEndpointEntity.ApiMethodType", "ApiMethodType")
                        .WithMany()
                        .HasForeignKey("ApiEndpointTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApiMethodType");
                });

            modelBuilder.Entity("Domain.ApiEndpointAgg.ApiEndpointEntity.RoleApiPermission", b =>
                {
                    b.HasOne("Domain.ApiEndpointAgg.ApiEndpointEntity.ApiEndpoint", "ApiEndpoint")
                        .WithMany("RolePermissions")
                        .HasForeignKey("ApiEndpointId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.RoleAgg.RoleEntity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApiEndpoint");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.CompanyAgg.CompanyEntity.Company", b =>
                {
                    b.HasOne("Domain.LocationAgg.LocationEntity.Location", "Location")
                        .WithMany("Companies")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.CompanyAgg.CompanyEntity.Company", "ParentCompany")
                        .WithMany("SubCompanies")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Location");

                    b.Navigation("ParentCompany");
                });

            modelBuilder.Entity("Domain.FormAgg.FormEntity.Form", b =>
                {
                    b.HasOne("Domain.FormAgg.FormEntity.Form", null)
                        .WithMany("ParentForms")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.FormAgg.FormTypeEntity.FormType", null)
                        .WithMany("Type")
                        .HasForeignKey("FormTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.LocationAgg.LocationEntity.Location", b =>
                {
                    b.HasOne("Domain.LocationAgg.LocationTypeEntity.LocationType", "LocationType")
                        .WithMany("Locations")
                        .HasForeignKey("LocationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LocationType");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.ConfigOrganizationEntity.ConfigOrganization", b =>
                {
                    b.HasOne("Domain.CompanyAgg.CompanyEntity.Company", "Company")
                        .WithMany("ConfigOrganizations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.OrganizationAgg.ConfigOrganizationEntity.ConfigOrganizationType", "ConfigOrganizationType")
                        .WithMany("ConfigOrganizations")
                        .HasForeignKey("ConfigOrganizationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.OrganizationAgg.ConfigOrganizationEntity.ConfigOrganization", "ConfigOrganizationParent")
                        .WithMany("ConfigOrganizationChildren")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.OrganizationAgg.PositionEntity.Position", "Position")
                        .WithMany("ConfigOrganizations")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.OrganizationAgg.SectionEntity.Section", "Section")
                        .WithMany("ConfigOrganizations")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("ConfigOrganizationParent");

                    b.Navigation("ConfigOrganizationType");

                    b.Navigation("Position");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.ConfigOrganizationEntity.ConfigOrganizationRank", b =>
                {
                    b.HasOne("Domain.OrganizationAgg.ConfigOrganizationEntity.ConfigOrganization", "ConfigOrganization")
                        .WithMany("OrganizationRanks")
                        .HasForeignKey("ConfigOrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.OrganizationAgg.RankEntity.Rank", "Rank")
                        .WithMany("ConfigOrganizationRanks")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConfigOrganization");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("Domain.RoleAgg.RoleEntity.Role", b =>
                {
                    b.HasOne("Domain.CompanyAgg.CompanyEntity.Company", "Company")
                        .WithMany("Roles")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.RoleAgg.RoleEntity.Role", "ParentRole")
                        .WithMany("SubRoles")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Company");

                    b.Navigation("ParentRole");
                });

            modelBuilder.Entity("Domain.RoleAgg.RoleFormEntity.RoleForm", b =>
                {
                    b.HasOne("Domain.FormAgg.FormEntity.Form", "Form")
                        .WithMany("RoleForms")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.RoleAgg.RoleEntity.Role", "Role")
                        .WithMany("RoleForms")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.UserAgg.UserRoleEntity.UserRole", b =>
                {
                    b.HasOne("Domain.RoleAgg.RoleEntity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.UserAgg.UserEntity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.ApiEndpointAgg.ApiEndpointEntity.ApiEndpoint", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.CompanyAgg.CompanyEntity.Company", b =>
                {
                    b.Navigation("ConfigOrganizations");

                    b.Navigation("Roles");

                    b.Navigation("SubCompanies");
                });

            modelBuilder.Entity("Domain.FormAgg.FormEntity.Form", b =>
                {
                    b.Navigation("ParentForms");

                    b.Navigation("RoleForms");
                });

            modelBuilder.Entity("Domain.FormAgg.FormTypeEntity.FormType", b =>
                {
                    b.Navigation("Type");
                });

            modelBuilder.Entity("Domain.LocationAgg.LocationEntity.Location", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Domain.LocationAgg.LocationTypeEntity.LocationType", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.ConfigOrganizationEntity.ConfigOrganization", b =>
                {
                    b.Navigation("ConfigOrganizationChildren");

                    b.Navigation("OrganizationRanks");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.ConfigOrganizationEntity.ConfigOrganizationType", b =>
                {
                    b.Navigation("ConfigOrganizations");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.PositionEntity.Position", b =>
                {
                    b.Navigation("ConfigOrganizations");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.RankEntity.Rank", b =>
                {
                    b.Navigation("ConfigOrganizationRanks");
                });

            modelBuilder.Entity("Domain.OrganizationAgg.SectionEntity.Section", b =>
                {
                    b.Navigation("ConfigOrganizations");
                });

            modelBuilder.Entity("Domain.RoleAgg.RoleEntity.Role", b =>
                {
                    b.Navigation("RoleForms");

                    b.Navigation("SubRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
